unit uSystemManager;

interface

uses
  uLayoutConfiguration, System.SysUtils;

type TSystemManager=class
  private
    FLayoutConfiguration: TLayoutConfiguration;
    constructor CreatePrivate;
  public
   constructor Create;
   destructor Destroy; override;
   function GetInstance: TSystemManager;
   class var FInstance: TSystemManager;

   property LayoutConfiguration: TLayoutConfiguration read FLayoutConfiguration write FLayoutConfiguration;
end;

implementation

{ TSystemManager }

constructor TSystemManager.Create;
begin
   raise Exception.Create('Para obter uma instância de TUsuario utilize TSystemManager.GetInstance !');
end;

constructor TSystemManager.CreatePrivate;
begin
  inherited Create;

end;

destructor TSystemManager.Destroy;
begin
  FLayoutConfiguration.Free;
  inherited;
end;

function TSystemManager.GetInstance: TSystemManager;
begin
  FLayoutConfiguration := TLayoutConfiguration.Create;
  if not Assigned(FInstance) then
      FInstance := TSystemManager.CreatePrivate;
   Result := FInstance;
end;

end.
