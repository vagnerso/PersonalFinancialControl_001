unit uMovement;

interface

uses
  uSearchFilters, uDataBaseConnection, uSubCategory, uFormPayment,
  System.SysUtils, Vcl.Dialogs, uAppConstants;

type TSearchFiltersCustomized = class(TSearchFilters)
  private
    FDataSet : TMyQuery;
    FSearchFiltersCustomized: TSearchFiltersCustomized;
    FId: Integer;
    FSubCategory: TSubCategory;
    FDescription: string;
    FUniqueId: string;
    FFormPayment: TFormPayment;
    FIssueDate: TDateTime;
    FInstallmentValue: Currency;
    FNumberParcel: Integer;
    FTypeMovement: string;
  public
    constructor Create;

    procedure InsertRegister;
    procedure UpdateRegister;
    procedure DeleteRegister;
    procedure Clear;
    procedure GetById;
    procedure Search(ADataSet: TMyQuery);
    destructor Destroy; override;

    property DataSet: TMyQuery read FDataSet write FDataSet;
    property SearchFiltersCustomized: TSearchFiltersCustomized read FSearchFiltersCustomized write FSearchFiltersCustomized;
    property Id: Integer read FId write FId;
    property UniqueId: string read FUniqueId write FUniqueId;
    property Description: string read FDescription write FDescription;
    property SubCategory: TSubCategory read FSubCategory write FSubCategory;
    property FormPayment: TFormPayment read FFormPayment write FFormPayment;
    property IssueDate: TDateTime read FIssueDate write FIssueDate;
    property InstallmentValue: Currency read FInstallmentValue write FInstallmentValue;
    property NumberParcel: Integer read FNumberParcel write FNumberParcel;
    property TypeMovement: string read FTypeMovement write FTypeMovement;

end;

type TMovement = class
  private

  public

{

CREATE TABLE MOVEMENT (
	ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	UNIQUE_ID TEXT(200) NOT NULL,
	DESCRIPTION TEXT(300) NOT NULL,
	ID_SUB_CATEGORY INTEGER,
	ID_FORM_PAYMENT INTEGER,
	ISSUE_DATE DATETIME
,   INSTALLMENT_VALUE NUMERIC DEFAULT 0, NUMBER_PARCEL INTEGER DEFAULT 0, TYPE_MOVEMENT TEXT(1));

  }

end;

implementation

{ TSearchFiltersCustomized }

procedure TSearchFiltersCustomized.Clear;
begin
  FId := 0;
  FSubCategory.Clear;
  FDescription := emptystr;
  FUniqueId := emptystr;
  FFormPayment.Clear;
  FIssueDate := 0;
  FInstallmentValue := 0;
  FNumberParcel := 0;
  FTypeMovement := emptystr;
end;

constructor TSearchFiltersCustomized.Create;
begin
  FDataSet := TMyQuery.Create(nil);
  FSearchFiltersCustomized := TSearchFiltersCustomized.Create;
end;

procedure TSearchFiltersCustomized.DeleteRegister;
begin
  try
    TDataBaseConnection.GetInstance.NewConnection;
    FDataSet.Close;
    FDataSet.SQL.Clear;
    FDataSet.SQL.Add('DELETE FROM MOVEMENT         ');
    FDataSet.SQL.Add('WHERE UNIQUE_ID = :UNIQUE_ID ');
    FDataSet.ParamByName('UNIQUE_ID').AsString := FUniqueId;
    FDataSet.ExecSQL;
    FDataSet.Connection.Commit;
  except on E: Exception do
    begin
      FDataSet.Connection.Rollback;
      Showmessage(MSG_ERROR_DELETE);
    end;
  end;
end;

destructor TSearchFiltersCustomized.Destroy;
begin
  FSearchFiltersCustomized.Free;
  FDataSet.Free;
  inherited;
end;

procedure TSearchFiltersCustomized.GetById;
begin

end;

procedure TSearchFiltersCustomized.InsertRegister;
begin
  try
    TDataBaseConnection.GetInstance.NewConnection;
    FDataSet.Close;
    FDataSet.SQL.Clear;
    FDataSet.SQL.Add('INSERT INTO SUB_CATEGORY (  ');
    FDataSet.SQL.Add('   UNIQUE_ID            ');
    FDataSet.SQL.Add(' , NAME                 ');
    FDataSet.SQL.Add(' , ID_CATEGORY          ');
    FDataSet.SQL.Add(' ) VALUES (             ');
    FDataSet.SQL.Add('   :UNIQUE_ID           ');
    FDataSet.SQL.Add(' , :NAME                ');
    FDataSet.SQL.Add(' , :ID_CATEGORY         ');
    FDataSet.SQL.Add(' )                      ');
    FDataSet.ParamByName('UNIQUE_ID').AsString := TFunctions.GenerateUUID;
    FDataSet.ParamByName('NAME').AsString := FName;
    FDataSet.ParamByName('ID_CATEGORY').AsInteger := FCategory.Id;
    FDataSet.ExecSQL;
    FDataSet.Connection.Commit;
  except on E: Exception do
    begin
      FDataSet.Connection.Rollback;
      Showmessage(MSG_ERROR_SUB_CATEGORY_INSERT);
    end;
  end;
end;

procedure TSearchFiltersCustomized.Search(ADataSet: TMyQuery);
begin

end;

procedure TSearchFiltersCustomized.UpdateRegister;
begin
  try
    TDataBaseConnection.GetInstance.NewConnection;
    FDataSet.Close;
    FDataSet.SQL.Clear;
    FDataSet.SQL.Add('UPDATE SUB_CATEGORY SET         ');
    FDataSet.SQL.Add('   NAME         = :NAME         ');
    FDataSet.SQL.Add(' , ID_CATEGORY  = :ID_CATEGORY  ');
    FDataSet.SQL.Add('WHERE UNIQUE_ID = :UNIQUE_ID    ');
    FDataSet.ParamByName('UNIQUE_ID').AsString := FUniqueId;
    FDataSet.ParamByName('NAME').AsString := FName;
    FDataSet.ParamByName('ID_CATEGORY').AsInteger := FCategory.Id;
    FDataSet.ExecSQL;
    FDataSet.Connection.Commit;
  except on E: Exception do
    begin
      FDataSet.Connection.Rollback;
      Showmessage(MSG_ERROR_SUB_CATEGORY_INSERT);
    end;
  end;
end;

end.
