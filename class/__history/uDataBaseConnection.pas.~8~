unit uDataBaseConnection;

interface

uses
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.VCLUI.Wait,
  Data.DB,
  FireDAC.Comp.Client,
  System.SysUtils,
  uFunctions,
  uAppConstants,
  Vcl.Dialogs,
  FireDAC.Phys.SQLite;

type TDataBaseConnection = class
  private


  public


   class function NewConnection: TFDConnection ;
end;

type TMyQuery = class(TFDQuery)
  private

  public
    constructor Create;

end;

implementation

{ TDataBaseConnection }

class function TDataBaseConnection.NewConnection: TFDConnection;
var
  FDPhysSQLiteDriverLink: TFDPhysSQLiteDriverLink;
begin
  FDPhysSQLiteDriverLink := TFDPhysSQLiteDriverLink.Create(nil);
  try

    Result := TFDConnection.Create(nil);
    Result.Params.DriverID := 'SQLite';
    Result.Params.Database := TFunctions.DataBasePath + DATABASE_NAME;

    try

      Result.Connected := True;


    except on e: Exception do
      begin
        showmessage('Erro ao tentar conectar no banco de dados.');
      end;
    end;

   finally
    //FDPhysSQLiteDriverLink.Free;
  end;
end;

{ TMyQuery }

constructor TMyQuery.Create;
begin
  Connection := TDataBaseConnection.NewConnection;
end;

end.
